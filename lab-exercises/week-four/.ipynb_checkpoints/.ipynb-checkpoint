{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Slicing Strings\n",
    "\n",
    "`import numpy as np`\n",
    "\n",
    "```element = 'oxygen'\n",
    "print('first three characters:', element[0:3])\n",
    "print('last three characters:', element[3:6])```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.What is the value of element[:4]? What about element[4:]? Or element[:]?\n",
    "```print (element [:4])\n",
    "print (element[4:])\n",
    "print (element [:])```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.What is element[-1]? What is element[-2]?\n",
    "`print(element[-1])`\n",
    "`print(element[-2])`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.Given those answers, explain what element[1:-1] does.\n",
    "\n",
    "`print(element[1:-1])`\n",
    "\n",
    "#### what this does is start from the first index (not zero) and captures everything inbetween and skips the last letter of the string\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.The expression element[3:3] produces an empty string, i.e., a string that contains no characters. If data holds our array of patient data, what does data[3:3, 4:4] produce? What about data[3:3, :]?\n",
    "\n",
    "`print(element[3:3])`\n",
    "#### all will produce an empty string"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stacking Arrays\n",
    "\n",
    "```A = np.array([[1,2,3], [4,5,6], [7, 8, 9]])\n",
    "print('A = ')\n",
    "print(A)```\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```B = np.hstack([A, A])\n",
    "print('B = ')\n",
    "print(B)```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "````C = np.vstack([A, A])\n",
    "print('C = ')\n",
    "print(C)```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```D = np.delete(A, 1, 1)\n",
    "print('D = ')\n",
    "print(D)```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```inflammation = np.loadtxt(fname = 'inflammation-01.csv', delimiter = ',')\n",
    "print(inflammation)```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Change in Inflammation\n",
    "\n",
    "```npdiff = np.array([ 0,  2,  5,  9, 14])```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```np.diff(npdiff)```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Which axis would it make sense to use this function along?\n",
    "\n",
    "#### the axis it would make most sense to do the difference along axis 1 because then you will get a difference in inflammation over the days for one patient\n",
    "\n",
    "```np.diff(inflammation, axis=1)\n",
    "print(inflammation)```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. If the shape of an individual data file is (60, 40) (60 rows and 40 columns), what would the shape of the array be after you run the diff() function and why?\n",
    "\n",
    "#### From an array that is 60 rows and 40 columns if we used the diff() function on this array, then it would be 60 rows and 39 columns since it removes from axis 1 (left to right on the array).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.How would you find the largest change in inflammation for each patient? Does it matter if the change in inflammation is an increase or a decrease?\n",
    "\n",
    "#### to find the largest change in inflammation \n",
    "\n",
    "#### first find the difference \n",
    "\n",
    "```diff_inflammation=np.diff(inflammation, axis=1)```\n",
    "\n",
    "#### then get the maximum differences\n",
    "\n",
    "```max_inflammation=np.max(diff_inflammation, axis=1) print(max_inflammation)```\n",
    "\n",
    "\n",
    "#### If the change in inflammation decreases, which is likely while subtracting. The next day can have a negative inflammation and would affect finding the largest change in inflammation for each patient as opposed to the largest change from max to min. \n",
    "\n",
    "#### the absolute command will give only absolute values\n",
    "\n",
    "```Max_Min=np.abs(max_inflammation)\n",
    "print(Max_Min)```\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
